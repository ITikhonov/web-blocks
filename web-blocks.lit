


		Block coordinates

	Each block is rectangular area, which have top,
	left, bottom and right coordinates relative to
	page.

	So at the very core each block looks like:

=test-block-basic
-		page = { 
-			top:		20,
-			left:		20, 
-			bottom:		1010, 
-			right:		700, 
-		}

-		page.block1 = { 
-			top:		10,
-			left:		20, 
-			bottom:		20, 
-			right:		40, 
-		}


	But in real life block coordinates can't be defined
	directly, as they are function of content (text size)
	or environment (font, viewport size).

	So block coordinates are mostly specified in terms of
	relation to other blocks.


=test-block-relative
-		block1 = {
-			top:	'page.top',
-			left:	'page.left + 20',
-			bottom:	'block1.top + 100',
-			right:	'block1.left + 120',
-		}

-		block2 = {
-			top:	'block1.bottom',
-			left:	'block1.right',
-			bottom:	'block2.top + 50',
-			right:	'block2.left + 75',
-		}

	Position of block2 depends on block1 position and size.


		Block content

	For some blocks their content is used to determine bottom
	and right coordinates.

	For each block content.bottom and content.right specifies
	maximum bottom and right coordinates of blocks it includes.

=test-block-content
-		block2 = {
-			top:	'block1.top + 10',
-			left:	'block1.left + 10',
-			bottom:	'block2.top + 50',
-			right:	'block2.left + 75',
-		}

-		block1 = {
-			top:	'page.top + 20',
-			left:	'page.left + 20',
-			bottom:	'block1.content.bottom + 20',
-			right:	'block1.content.right + 20',
-			content: [ block2 ]
-		}


		Evaluating coordinates

	Converting relative coordinates into absolute

=eval-coord
-function eval_coord(expr) {
-	if(typeof expr == 'string') {
-		return eval(expr);
-	} else {
-		return expr;
-	}
-}

=eval-block
-function eval_block(block) {
-	for(var k in block) {
-		if(k[0]!='_' && typeof block[k]=='object') {
-			eval_block(block[k]);
-		}
-	}
-	block._el=document.createElement('div');
-	block._el.className='apos';
-	block._el.style.top	=eval_coord(block.top);
-	block._el.style.left	=eval_coord(block.left);
-	block._el.style.width	=eval_coord(block.right) - eval_coord(block.left);
-	block._el.style.height	=eval_coord(block.bottom) - eval_coord(block.top);
-}

		Producing html

=bake
-function bake(block) {
-	for(var k in block) {
-		if(k[0]!='_' && typeof block[k]=='object') {
-			console.log(k);
-			document.body.appendChild(block[k]._el);
-			bake(block[k]);
-		}
-	}
-}
	
=>main.js
(function()
>eval-coord
>eval-block
>bake

-window.onload=function() { eval_block(page); bake(page); };

)();

=test-html-pre
-<html><head><meta http-equiv="Content-Type" content="text/html;charset=utf-8"><style>.apos{position:absolute;margin:0;padding:0;border:1px solid black;overflow:hidden}</style></head><script>

=test-html-post
-</script><script src="../main.js"></script><body></body></html>

=>test/basic.html
>test-html-pre
>test-block-basic
>test-html-post


=>test/relative.html
>test-html-pre
>test-block-relative
>test-html-post

=>test/content.html
>test-block-content
 
